
TASK1B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006e4  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000978  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000543  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000177  00000000  00000000  00000f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000373  00000000  00000000  000010b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000074  00000000  00000000  00001428  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000016a  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000003e  00000000  00000000  00001606  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 eb       	ldi	r30, 0xB2	; 178
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 30       	cpi	r26, 0x00	; 0
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 b8 00 	call	0x170	; 0x170 <main>
 122:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <buzzer_pin_config>:
Logic: Setting PORTC3 as output which is the pin connected to the buzzer
Example Call: buzzer_pin_config()
*/
void buzzer_pin_config(void)
{
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
 12a:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
 12c:	43 98       	cbi	0x08, 3	; 8
}
 12e:	08 95       	ret

00000130 <buzzer_on>:
Example Call: buzzer_on ()
*/
void buzzer_on(void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
 130:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
 132:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
 134:	88 b9       	out	0x08, r24	; 8
}
 136:	08 95       	ret

00000138 <buzzer_off>:
Example Call: buzzer_off()
*/
void buzzer_off(void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
 138:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
 13a:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
 13c:	88 b9       	out	0x08, r24	; 8
}
 13e:	08 95       	ret

00000140 <buzzer_beep>:
Logic: Turns the buzzer on and off by writing 1 & 0 to PC3
Example Call: buzzer_beep()
*/
void buzzer_beep()
{
	buzzer_on();
 140:	0e 94 98 00 	call	0x130	; 0x130 <buzzer_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	9f ef       	ldi	r25, 0xFF	; 255
 148:	a8 e0       	ldi	r26, 0x08	; 8
 14a:	81 50       	subi	r24, 0x01	; 1
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	a0 40       	sbci	r26, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <buzzer_beep+0xa>
 152:	00 c0       	rjmp	.+0      	; 0x154 <buzzer_beep+0x14>
 154:	00 00       	nop
	_delay_ms(200);
	buzzer_off();
 156:	0e 94 9c 00 	call	0x138	; 0x138 <buzzer_off>
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	9f ef       	ldi	r25, 0xFF	; 255
 15e:	a8 e0       	ldi	r26, 0x08	; 8
 160:	81 50       	subi	r24, 0x01	; 1
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	a0 40       	sbci	r26, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <buzzer_beep+0x20>
 168:	00 c0       	rjmp	.+0      	; 0x16a <buzzer_beep+0x2a>
 16a:	00 00       	nop
	_delay_ms(200);
}
 16c:	08 95       	ret

0000016e <ReachDestinationAvoidingNode>:
#include "buzzer.h"

void ReachDestinationAvoidingNode(unsigned char Xd,unsigned char Yd,unsigned char Xn,unsigned char Yn)
{
	//TODO:: Please write your application code. You can make your own functions & header files
}
 16e:	08 95       	ret

00000170 <main>:
//Do not make changes in main function

int main(void)
{
       ReachDestinationAvoidingNode(5,'C',6,'D');
	   buzzer_on();
 170:	0e 94 98 00 	call	0x130	; 0x130 <buzzer_on>
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	9f e7       	ldi	r25, 0x7F	; 127
 178:	a6 e1       	ldi	r26, 0x16	; 22
 17a:	81 50       	subi	r24, 0x01	; 1
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	a0 40       	sbci	r26, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <main+0xa>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x14>
 184:	00 00       	nop
	   _delay_ms(500);
	   buzzer_off();
 186:	0e 94 9c 00 	call	0x138	; 0x138 <buzzer_off>
	   ReachDestinationAvoidingNode(2,'F',2,'D');
	   buzzer_on();
 18a:	0e 94 98 00 	call	0x130	; 0x130 <buzzer_on>
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	9f e7       	ldi	r25, 0x7F	; 127
 192:	a6 e1       	ldi	r26, 0x16	; 22
 194:	81 50       	subi	r24, 0x01	; 1
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	a0 40       	sbci	r26, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x24>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x2e>
 19e:	00 00       	nop
	   _delay_ms(500);
	   buzzer_off();
 1a0:	0e 94 9c 00 	call	0x138	; 0x138 <buzzer_off>
	   ReachDestinationAvoidingNode(2,'A',2,'C');
	   buzzer_on();
 1a4:	0e 94 98 00 	call	0x130	; 0x130 <buzzer_on>
	   
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	08 95       	ret

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
